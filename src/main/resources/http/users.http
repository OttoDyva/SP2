### Get all users (Admin only)
GET {{url}}/auth/users
Accept: application/json
Authorization: Bearer {{jwt_token}}

### Create a new user - this one will only get a USER role by default
POST {{url}}/auth/register
Content-Type: application/json

{
  "username": "nybruger",
  "password": "nybruger123"
}

### Login to retrieve JWT token
POST {{url}}/auth/login
Content-Type: application/json

{
  "username": "bekhan",
  "password": "bekhan123"
}

> {%
    client.global.set("jwt_token", response.body.token);
    console.log("JWT Token:", client.global.get("jwt_token"));
%}

### Add admin role to the user (Requires logged-in user with the `USER` role)
POST {{url}}/auth/user/addrole
Accept: application/json
Authorization: Bearer {{jwt_token}}

{
    "role": "admin"
}

### Update user details (Admin only)
PUT {{url}}/auth/user/nybruger
Content-Type: application/json
Authorization: Bearer {{jwt_token}}

{
  "password": "nybruger1234",
  "roles": ["admin", "user"]
}

### Delete user by username (Admin only)
DELETE {{url}}/auth/user/blyant
Content-Type: application/json
Authorization: Bearer {{jwt_token}}

### Test user-protected route
GET {{url}}/protected/user_demo/
Accept: application/json
Authorization: Bearer {{jwt_token}}

### Test admin-protected route
GET {{url}}/protected/admin_demo/
Accept: application/json
Authorization: Bearer {{jwt_token}}

### Reset JWT token
GET {{url}}/auth/test

> {%
    client.global.set("jwt_token", null);
    console.log("JWT Token:", client.global.get("jwt_token"));
%}
